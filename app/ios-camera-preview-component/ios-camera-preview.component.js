"use strict";
var core_1 = require("@angular/core");
var platform = require("platform");
var IosCameraPreviewComponent = (function () {
    function IosCameraPreviewComponent() {
        this.session = new AVCaptureSession();
    }
    IosCameraPreviewComponent.prototype.ngOnInit = function () {
    };
    IosCameraPreviewComponent.prototype.takePhoto = function () {
        var videoConnection = this.deviceOutput.connections[0];
        this.deviceOutput.captureStillImageAsynchronouslyFromConnectionCompletionHandler(videoConnection, function (buffer, error) {
            var imageData = AVCaptureStillImageOutput.jpegStillImageNSDataRepresentation(buffer);
            var image = UIImage.imageWithData(imageData);
            UIImageWriteToSavedPhotosAlbum(image, null, null, null);
            AudioServicesPlaySystemSound(144);
        });
    };
    // Init
    IosCameraPreviewComponent.prototype.onCreatingView = function (args) {
        this.setupAvCapture();
        this.beginSession();
        this.previewLayer = AVCaptureVideoPreviewLayer.layerWithSession(this.session);
        this.previewView = new UIView(CGRectMake(0, 0, platform.screen.mainScreen.widthDIPs, platform.screen.mainScreen.heightDIPs));
        this.previewLayer.frame = this.previewView.bounds;
        this.previewView.layer.addSublayer(this.previewLayer);
        args.view = this.previewView;
    };
    IosCameraPreviewComponent.prototype.setupAvCapture = function () {
        this.captureDevice = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo);
        this.deviceInput = AVCaptureDeviceInput.deviceInputWithDeviceError(this.captureDevice, null);
        this.deviceOutput = new AVCaptureStillImageOutput();
    };
    IosCameraPreviewComponent.prototype.beginSession = function () {
        this.session = new AVCaptureSession();
        this.session.sessionPreset = AVCaptureSessionPreset1280x720;
        this.session.addInput(this.deviceInput);
        this.session.addOutput(this.deviceOutput);
        this.session.startRunning();
    };
    return IosCameraPreviewComponent;
}());
IosCameraPreviewComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'ios-camera-preview',
        templateUrl: 'ios-camera-preview.component.html',
        styleUrls: ['ios-camera-preview.css']
    }),
    __metadata("design:paramtypes", [])
], IosCameraPreviewComponent);
exports.IosCameraPreviewComponent = IosCameraPreviewComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9zLWNhbWVyYS1wcmV2aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlvcy1jYW1lcmEtcHJldmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUFrRDtBQUdsRCxtQ0FBcUM7QUFnQ3JDLElBQWEseUJBQXlCO0lBU3JDO1FBRlEsWUFBTyxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUd6QyxDQUFDO0lBRUQsNENBQVEsR0FBUjtJQUVBLENBQUM7SUFFTSw2Q0FBUyxHQUFoQjtRQUNPLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLENBQUMsOERBQThELENBQUMsZUFBZSxFQUFFLFVBQVUsTUFBTSxFQUFFLEtBQUs7WUFDckgsSUFBSSxTQUFTLEdBQUcseUJBQXlCLENBQUMsa0NBQWtDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckYsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3Qyw4QkFBOEIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN4RCw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFRCxPQUFPO0lBQ0Msa0RBQWMsR0FBdEIsVUFBdUIsSUFBSTtRQUMxQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBR3BCLElBQUksQ0FBQyxZQUFZLEdBQUcsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7UUFDNUgsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDcEMsQ0FBQztJQUVPLGtEQUFjLEdBQXRCO1FBQ0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0YsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHlCQUF5QixFQUFFLENBQUM7SUFDckQsQ0FBQztJQUVPLGdEQUFZLEdBQXBCO1FBQ0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsOEJBQThCLENBQUM7UUFFNUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFDRixnQ0FBQztBQUFELENBQUMsQUF6REQsSUF5REM7QUF6RFkseUJBQXlCO0lBTnJDLGdCQUFTLENBQUM7UUFDVixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLG9CQUFvQjtRQUM5QixXQUFXLEVBQUUsbUNBQW1DO1FBQ2hELFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO0tBQ3JDLENBQUM7O0dBQ1cseUJBQXlCLENBeURyQztBQXpEWSw4REFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tICdhcHBsaWNhdGlvbic7XG5pbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tICdwbGF0Zm9ybSc7XG5pbXBvcnQgKiBhcyBwYWdlIGZyb20gJ3VpL3BhZ2UnO1xuXG4vLyBmb3IgaU9TIG91dHB1dFxuLy8gdmFyIG91dHB1dDtcbmRlY2xhcmUgdmFyIEFWQ2FwdHVyZVN0aWxsSW1hZ2VPdXRwdXQ7XG5kZWNsYXJlIHZhciBVSUltYWdlO1xuZGVjbGFyZSB2YXIgVUlJbWFnZVdyaXRlVG9TYXZlZFBob3Rvc0FsYnVtO1xuZGVjbGFyZSB2YXIgQXVkaW9TZXJ2aWNlc1BsYXlTeXN0ZW1Tb3VuZDtcbmRlY2xhcmUgdmFyIEFWQ2FwdHVyZURldmljZTtcbmRlY2xhcmUgdmFyIEFWQ2FwdHVyZURldmljZUlucHV0O1xuZGVjbGFyZSB2YXIgQVZDYXB0dXJlU2Vzc2lvbjtcbmRlY2xhcmUgdmFyIEFWQ2FwdHVyZVNlc3Npb25QcmVzZXQxMjgweDcyMDtcbmRlY2xhcmUgdmFyIEFWQ2FwdHVyZVNlc3Npb25QcmVzZXRQaG90bztcbmRlY2xhcmUgdmFyIEFWQ2FwdHVyZVN0aWxsSW1hZ2VPdXRwdXQ7XG5kZWNsYXJlIHZhciBBVkNhcHR1cmVWaWRlb1ByZXZpZXdMYXllcjtcbmRlY2xhcmUgdmFyIFVJVmlldztcbmRlY2xhcmUgdmFyIEFWTWVkaWFUeXBlVmlkZW87XG5kZWNsYXJlIHZhciBVSVZpZXdDb250ZW50TW9kZTtcbmRlY2xhcmUgdmFyIEFWTGF5ZXJWaWRlb0dyYXZpdHlSZXNpemVBc3BlY3Q7XG5kZWNsYXJlIHZhciBVSUNvbG9yO1xuZGVjbGFyZSB2YXIgQ0dSZWN0TWFrZTtcbmRlY2xhcmUgdmFyIFVJVmlld0F1dG9yZXNpemluZ0ZsZXhpYmxlV2lkdGg7XG5kZWNsYXJlIHZhciBVSVZpZXdBdXRvcmVzaXppbmdGbGV4aWJsZUhlaWdodDtcbmRlY2xhcmUgdmFyIENHUmVjdFplcm87XG5cbkBDb21wb25lbnQoe1xuXHRtb2R1bGVJZDogbW9kdWxlLmlkLFxuXHRzZWxlY3RvcjogJ2lvcy1jYW1lcmEtcHJldmlldycsXG5cdHRlbXBsYXRlVXJsOiAnaW9zLWNhbWVyYS1wcmV2aWV3LmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJ2lvcy1jYW1lcmEtcHJldmlldy5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBJb3NDYW1lcmFQcmV2aWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblx0cHJpdmF0ZSBwcmV2aWV3VmlldzogYW55O1xuXHRwcml2YXRlIHByZXZpZXdMYXllcjogYW55O1xuXHRwcml2YXRlIGNhcHR1cmVEZXZpY2U6IGFueTtcblx0cHJpdmF0ZSBkZXZpY2VJbnB1dDogYW55O1xuXHRwcml2YXRlIGRldmljZU91dHB1dDogYW55O1xuXG5cdHByaXZhdGUgc2Vzc2lvbiA9IG5ldyBBVkNhcHR1cmVTZXNzaW9uKCk7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdH1cblxuXHRuZ09uSW5pdCgpOiB2b2lkIHtcblxuXHR9XG5cblx0cHVibGljIHRha2VQaG90bygpOiB2b2lkIHtcbiAgICAgICAgdmFyIHZpZGVvQ29ubmVjdGlvbiA9IHRoaXMuZGV2aWNlT3V0cHV0LmNvbm5lY3Rpb25zWzBdO1xuICAgICAgICB0aGlzLmRldmljZU91dHB1dC5jYXB0dXJlU3RpbGxJbWFnZUFzeW5jaHJvbm91c2x5RnJvbUNvbm5lY3Rpb25Db21wbGV0aW9uSGFuZGxlcih2aWRlb0Nvbm5lY3Rpb24sIGZ1bmN0aW9uIChidWZmZXIsIGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VEYXRhID0gQVZDYXB0dXJlU3RpbGxJbWFnZU91dHB1dC5qcGVnU3RpbGxJbWFnZU5TRGF0YVJlcHJlc2VudGF0aW9uKGJ1ZmZlcik7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSBVSUltYWdlLmltYWdlV2l0aERhdGEoaW1hZ2VEYXRhKTtcbiAgICAgICAgICAgIFVJSW1hZ2VXcml0ZVRvU2F2ZWRQaG90b3NBbGJ1bShpbWFnZSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICBBdWRpb1NlcnZpY2VzUGxheVN5c3RlbVNvdW5kKDE0NCk7XG4gICAgICAgIH0pO1xuXHR9XG5cblx0Ly8gSW5pdFxuXHRwcml2YXRlIG9uQ3JlYXRpbmdWaWV3KGFyZ3MpOiB2b2lkIHtcblx0XHR0aGlzLnNldHVwQXZDYXB0dXJlKCk7XG5cdFx0dGhpcy5iZWdpblNlc3Npb24oKTtcblxuXG5cdFx0dGhpcy5wcmV2aWV3TGF5ZXIgPSBBVkNhcHR1cmVWaWRlb1ByZXZpZXdMYXllci5sYXllcldpdGhTZXNzaW9uKHRoaXMuc2Vzc2lvbik7XG5cblx0XHR0aGlzLnByZXZpZXdWaWV3ID0gbmV3IFVJVmlldyhDR1JlY3RNYWtlKDAsIDAsIHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLndpZHRoRElQcywgcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uaGVpZ2h0RElQcykpXG5cdFx0dGhpcy5wcmV2aWV3TGF5ZXIuZnJhbWUgPSB0aGlzLnByZXZpZXdWaWV3LmJvdW5kcztcblx0XHR0aGlzLnByZXZpZXdWaWV3LmxheWVyLmFkZFN1YmxheWVyKHRoaXMucHJldmlld0xheWVyKTtcblxuICAgICAgICBhcmdzLnZpZXcgPSB0aGlzLnByZXZpZXdWaWV3O1xuXHR9XG5cblx0cHJpdmF0ZSBzZXR1cEF2Q2FwdHVyZSgpOiB2b2lkIHtcblx0XHR0aGlzLmNhcHR1cmVEZXZpY2UgPSBBVkNhcHR1cmVEZXZpY2UuZGVmYXVsdERldmljZVdpdGhNZWRpYVR5cGUoQVZNZWRpYVR5cGVWaWRlbyk7XG5cdFx0dGhpcy5kZXZpY2VJbnB1dCA9IEFWQ2FwdHVyZURldmljZUlucHV0LmRldmljZUlucHV0V2l0aERldmljZUVycm9yKHRoaXMuY2FwdHVyZURldmljZSwgbnVsbCk7XG5cblx0XHR0aGlzLmRldmljZU91dHB1dCA9IG5ldyBBVkNhcHR1cmVTdGlsbEltYWdlT3V0cHV0KCk7XG5cdH1cblxuXHRwcml2YXRlIGJlZ2luU2Vzc2lvbigpOiB2b2lkIHtcblx0XHR0aGlzLnNlc3Npb24gPSBuZXcgQVZDYXB0dXJlU2Vzc2lvbigpO1xuXHRcdHRoaXMuc2Vzc2lvbi5zZXNzaW9uUHJlc2V0ID0gQVZDYXB0dXJlU2Vzc2lvblByZXNldDEyODB4NzIwO1xuXG5cdFx0dGhpcy5zZXNzaW9uLmFkZElucHV0KHRoaXMuZGV2aWNlSW5wdXQpO1xuXHRcdHRoaXMuc2Vzc2lvbi5hZGRPdXRwdXQodGhpcy5kZXZpY2VPdXRwdXQpO1xuXG5cdFx0dGhpcy5zZXNzaW9uLnN0YXJ0UnVubmluZygpO1xuXHR9XG59Il19