"use strict";
var core_1 = require("@angular/core");
var application = require("application");
if (application.android) {
    var STATE_PREVIEW = 0;
    var STATE_WAITING_LOCK = 1;
    var STATE_WAITING_PRECAPTURE = 2;
    var STATE_WAITING_NON_PRECAPTURE = 3;
    var STATE_PICTURE_TAKEN = 4;
    var mState = STATE_PREVIEW;
    var mTextureView;
    var mPreviewSize = null;
    var mCameraDevice = null;
    var mPreviewBuilder = null;
    var mPreviewSession = null;
    var mStateCallback = null;
    var mPreviewStateCallback = null;
}
var mSurfaceTextureListener;
var MyStateCallback;
var MyPreviewStateCallback;
var AndroidCameraPreviewComponent = AndroidCameraPreviewComponent_1 = (function () {
    function AndroidCameraPreviewComponent() {
    }
    AndroidCameraPreviewComponent.prototype.ngOnInit = function () {
        AndroidCameraPreviewComponent_1.requestPermissions();
    };
    AndroidCameraPreviewComponent.prototype.takePhoto = function () {
        captureImage();
    };
    // Init
    AndroidCameraPreviewComponent.prototype.onCreatingView = function (args) {
        mTextureView = new android.view.TextureView(application.android.context);
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        args.view = mTextureView;
    };
    /* Static Methods */
    AndroidCameraPreviewComponent.isAvailable = function () {
        var utils = require("utils/utils");
        return utils.ad.getApplicationContext().getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_CAMERA);
    };
    AndroidCameraPreviewComponent.requestPermissions = function () {
        var REQUEST_REQUIRED_PERMISSIONS = 1234;
        if (!AndroidCameraPreviewComponent_1.hasPermissions()) {
            android.support.v4.app.ActivityCompat.requestPermissions(application.android.currentContext, [android.Manifest.permission.CAMERA, android.Manifest.permission.WRITE_EXTERNAL_STORAGE], REQUEST_REQUIRED_PERMISSIONS);
        }
    };
    AndroidCameraPreviewComponent.hasPermissions = function () {
        console.log("checking permissions ....");
        return android.support.v4.content.ContextCompat.checkSelfPermission(application.android.currentContext, android.Manifest.permission.WRITE_EXTERNAL_STORAGE) === android.content.pm.PackageManager.PERMISSION_GRANTED
            && android.support.v4.content.ContextCompat.checkSelfPermission(application.android.currentContext, android.Manifest.permission.CAMERA) === android.content.pm.PackageManager.PERMISSION_GRANTED;
    };
    return AndroidCameraPreviewComponent;
}());
AndroidCameraPreviewComponent.TAG = 'NNGCameraPreview';
AndroidCameraPreviewComponent = AndroidCameraPreviewComponent_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'android-camera-preview',
        templateUrl: 'android-camera-preview.component.html',
        styleUrls: ['android-camera-preview.css']
    }),
    __metadata("design:paramtypes", [])
], AndroidCameraPreviewComponent);
exports.AndroidCameraPreviewComponent = AndroidCameraPreviewComponent;
function startPreview() {
    var texture = mTextureView.getSurfaceTexture();
    if (texture == null) {
        return;
    }
    texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
    var surface = new android.view.Surface(texture);
    try {
        mPreviewBuilder = mCameraDevice.createCaptureRequest(android.hardware.camera2.CameraDevice.TEMPLATE_PREVIEW);
    }
    catch (err) {
        console.error(err);
    }
    mPreviewBuilder.addTarget(surface);
    try {
        if (mPreviewStateCallback == null) {
            mPreviewStateCallback = new MyPreviewStateCallback();
        }
        var surfaceList = new java.util.ArrayList();
        surfaceList.add(surface);
        mCameraDevice.createCaptureSession(surfaceList, mPreviewStateCallback, null);
    }
    catch (err) {
        console.error(err);
    }
}
if (application.android) {
    /* Listeners */
    mSurfaceTextureListener = new android.view.TextureView.SurfaceTextureListener({
        onSurfaceTextureAvailable: function (surface, width, height) {
            console.log('SurfaceTextureListener onSurfaceTextureAvailable');
            var appContext = application.android.foregroundActivity;
            var manager = appContext.getSystemService(android.content.Context.CAMERA_SERVICE);
            try {
                var cameraId = manager.getCameraIdList()[0]; // TODO: find the back facing camera
                var characteristics = manager.getCameraCharacteristics(cameraId);
                var map = characteristics.get(android.hardware.camera2.CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                mPreviewSize = map.getOutputSizes(android.graphics.SurfaceTexture.class)[0];
                if (mStateCallback == null) {
                    mStateCallback = new MyStateCallback();
                }
                manager.openCamera(cameraId, mStateCallback, null);
            }
            catch (err) {
                console.error(err);
            }
        },
        onSurfaceTextureUpdated: function (surface) {
            // console.log('SurfaceTextureListener onSurfaceTextureUpdated');
        },
        onSurfaceTextureSizeChanged: function (surface, width, height) {
            console.log('SurfaceTextureListener onSurfaceTextureSizeChanged');
        },
        onSurfaceTextureDestroyed: function (surface) {
            console.log('SurfaceTextureListener onSurfaceTextureDestroyed');
            return false;
        }
    });
    /* Callbacks */
    MyStateCallback = android.hardware.camera2.CameraDevice.StateCallback.extend({
        onOpened: function (camera) {
            console.log('CameraDevice.StateCallback onOpened');
            mCameraDevice = camera;
            startPreview();
        },
        onError: function (camera, error) {
            console.error('CameraDevice.StateCallbackError: ' + error);
        },
        onDisconnected: function (camera) {
            console.log('CameraDevice.StateCallback onDisconnected');
        }
    });
    MyPreviewStateCallback = android.hardware.camera2.CameraCaptureSession.StateCallback.extend({
        onConfigured: function (session) {
            console.log('CameraCaptureSession.StateCallback onConfigured');
            mPreviewSession = session;
            mPreviewBuilder.set(android.hardware.camera2.CaptureRequest.CONTROL_MODE, java.lang.Integer.valueOf(android.hardware.camera2.CameraMetadata.CONTROL_MODE_AUTO));
            var backgroundThread = new android.os.HandlerThread('NNGCameraPreview');
            backgroundThread.start();
            var backgroundHandler = new android.os.Handler(backgroundThread.getLooper());
            try {
                mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), null, backgroundHandler);
            }
            catch (err) {
                console.error(err);
            }
        },
        onConfigureFailed: function (session) {
            console.log('CameraCaptureSession Configure failed');
        }
    });
}
/* IMAGE CAPTURE */
function captureImage() {
    if (null == mCameraDevice) {
        return;
    }
    var appContext = application.android.foregroundActivity;
    var manager = appContext.getSystemService(android.content.Context.CAMERA_SERVICE);
    try {
        var characteristics = manager.getCameraCharacteristics(mCameraDevice.getId());
        var jpegSizes = null;
        if (characteristics != null) {
            jpegSizes = characteristics
                .get(android.hardware.camera2.CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
                .getOutputSizes(android.graphics.ImageFormat.JPEG);
        }
        var width = 640; // default
        var height = 480; // default
        if (jpegSizes != null && jpegSizes.length > 0) {
            width = jpegSizes[0].getWidth();
            height = jpegSizes[0].getHeight();
        }
        var reader = android.media.ImageReader.newInstance(width, height, android.graphics.ImageFormat.JPEG, 1);
        var outputSurfaces = new java.util.ArrayList();
        outputSurfaces.add(reader.getSurface());
        outputSurfaces.add(new android.view.Surface(mTextureView.getSurfaceTexture()));
        var captureBuilder_1 = mCameraDevice.createCaptureRequest(android.hardware.camera2.CameraDevice.TEMPLATE_STILL_CAPTURE);
        captureBuilder_1.addTarget(reader.getSurface());
        captureBuilder_1.set(android.hardware.camera2.CaptureRequest.CONTROL_MODE, java.lang.Integer.valueOf(android.hardware.camera2.CameraMetadata.CONTROL_MODE_AUTO));
        // TODO: rotation
        var rotation = appContext.getWindowManager().getDefaultDisplay().getRotation();
        console.log(rotation);
        captureBuilder_1.set(android.hardware.camera2.CaptureRequest.JPEG_ORIENTATION, java.lang.Integer.valueOf(getRotation(rotation)));
        var file_1 = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DCIM", "pic" + (Math.floor(Math.random() * 9999) + 1) + ".jpg");
        console.log('burp');
        var readerListener = new android.media.ImageReader.OnImageAvailableListener({
            save: function (bytes) {
                console.log('Saving Bytes');
                var output = null;
                try {
                    output = new java.io.FileOutputStream(file_1);
                    output.write(bytes);
                }
                finally {
                    if (output != null) {
                        output.close();
                    }
                }
            },
            onImageAvailable: function (reader) {
                var image = null;
                try {
                    image = reader.acquireLatestImage();
                    var buffer = image.getPlanes()[0].getBuffer();
                    var bytes = Array.create('byte', buffer.capacity());
                    buffer.get(bytes);
                    this.save(bytes);
                }
                catch (err) {
                    console.error(err);
                }
                finally {
                    if (image != null) {
                        image.close();
                    }
                }
            }
        });
        var thread = new android.os.HandlerThread('NNGCameraPreview');
        thread.start();
        var backgroundHandler_1 = new android.os.Handler(thread.getLooper());
        reader.setOnImageAvailableListener(readerListener, backgroundHandler_1);
        var captureListener_1 = android.hardware.camera2.CameraCaptureSession.CaptureCallback.extend({
            onCaptureCompleted: function (session, request, result) {
                startPreview();
                console.log('Capture Complete');
            }
        });
        var captureStateCallback = android.hardware.camera2.CameraCaptureSession.StateCallback.extend({
            onConfigured: function (session) {
                try {
                    session.capture(captureBuilder_1.build(), new captureListener_1(), backgroundHandler_1);
                }
                catch (err) {
                    console.error(err);
                }
            },
            onConfigureFailed: function (session) {
            }
        });
        console.log('burp');
        mCameraDevice.createCaptureSession(outputSurfaces, new captureStateCallback(), backgroundHandler_1);
    }
    catch (err) {
        console.error(err);
    }
}
function getRotation(rotation) {
    if (rotation === android.view.Surface.ROTATION_0) {
        return 90;
    }
    else if (rotation === android.view.Surface.ROTATION_90) {
        return 0;
    }
    else if (rotation === android.view.Surface.ROTATION_180) {
        return 270;
    }
    else {
        return 180;
    }
}
var AndroidCameraPreviewComponent_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5kcm9pZC1jYW1lcmEtcHJldmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbmRyb2lkLWNhbWVyYS1wcmV2aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQWtEO0FBRWxELHlDQUEyQztBQU8zQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUV6QixJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDdEIsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7SUFDM0IsSUFBSSx3QkFBd0IsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSw0QkFBNEIsR0FBRyxDQUFDLENBQUM7SUFDckMsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7SUFDNUIsSUFBSSxNQUFNLEdBQUcsYUFBYSxDQUFDO0lBRTNCLElBQUksWUFBaUIsQ0FBQztJQUN0QixJQUFJLFlBQVksR0FBUSxJQUFJLENBQUM7SUFDN0IsSUFBSSxhQUFhLEdBQVEsSUFBSSxDQUFDO0lBQzlCLElBQUksZUFBZSxHQUFRLElBQUksQ0FBQztJQUNoQyxJQUFJLGVBQWUsR0FBUSxJQUFJLENBQUM7SUFFaEMsSUFBSSxjQUFjLEdBQVEsSUFBSSxDQUFDO0lBQy9CLElBQUkscUJBQXFCLEdBQVEsSUFBSSxDQUFDO0FBQ3ZDLENBQUM7QUFDRCxJQUFJLHVCQUF1QixDQUFDO0FBQzVCLElBQUksZUFBZSxDQUFDO0FBQ3BCLElBQUksc0JBQXNCLENBQUM7QUFRM0IsSUFBYSw2QkFBNkI7SUFJekM7SUFDQSxDQUFDO0lBRUQsZ0RBQVEsR0FBUjtRQUNDLCtCQUE2QixDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVNLGlEQUFTLEdBQWhCO1FBQ0MsWUFBWSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU87SUFDQyxzREFBYyxHQUF0QixVQUF1QixJQUFJO1FBQzFCLFlBQVksR0FB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QyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0FBQ0YsQ0FBQztBQUVELHFCQUFxQixRQUFRO0lBQzVCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDVixDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDWixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tICdhcHBsaWNhdGlvbic7XG5pbXBvcnQgKiBhcyBwYWdlIGZyb20gJ3VpL3BhZ2UnO1xuaW1wb3J0ICogYXMgdXRpbHNNb2R1bGUgZnJvbSBcInV0aWxzL3V0aWxzXCI7XG5cbmRlY2xhcmUgdmFyIGFuZHJvaWQ6IGFueTtcbmRlY2xhcmUgdmFyIGphdmE6IGFueTtcblxuaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcblxuXHR2YXIgU1RBVEVfUFJFVklFVyA9IDA7XG5cdHZhciBTVEFURV9XQUlUSU5HX0xPQ0sgPSAxO1xuXHR2YXIgU1RBVEVfV0FJVElOR19QUkVDQVBUVVJFID0gMjtcblx0dmFyIFNUQVRFX1dBSVRJTkdfTk9OX1BSRUNBUFRVUkUgPSAzO1xuXHR2YXIgU1RBVEVfUElDVFVSRV9UQUtFTiA9IDQ7XG5cdHZhciBtU3RhdGUgPSBTVEFURV9QUkVWSUVXO1xuXG5cdHZhciBtVGV4dHVyZVZpZXc6IGFueTtcblx0dmFyIG1QcmV2aWV3U2l6ZTogYW55ID0gbnVsbDtcblx0dmFyIG1DYW1lcmFEZXZpY2U6IGFueSA9IG51bGw7XG5cdHZhciBtUHJldmlld0J1aWxkZXI6IGFueSA9IG51bGw7XG5cdHZhciBtUHJldmlld1Nlc3Npb246IGFueSA9IG51bGw7XG5cblx0dmFyIG1TdGF0ZUNhbGxiYWNrOiBhbnkgPSBudWxsO1xuXHR2YXIgbVByZXZpZXdTdGF0ZUNhbGxiYWNrOiBhbnkgPSBudWxsO1xufVxudmFyIG1TdXJmYWNlVGV4dHVyZUxpc3RlbmVyO1xudmFyIE15U3RhdGVDYWxsYmFjaztcbnZhciBNeVByZXZpZXdTdGF0ZUNhbGxiYWNrO1xuXG5AQ29tcG9uZW50KHtcblx0bW9kdWxlSWQ6IG1vZHVsZS5pZCxcblx0c2VsZWN0b3I6ICdhbmRyb2lkLWNhbWVyYS1wcmV2aWV3Jyxcblx0dGVtcGxhdGVVcmw6ICdhbmRyb2lkLWNhbWVyYS1wcmV2aWV3LmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJ2FuZHJvaWQtY2FtZXJhLXByZXZpZXcuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQW5kcm9pZENhbWVyYVByZXZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG5cdHByaXZhdGUgc3RhdGljIFRBRyA9ICdOTkdDYW1lcmFQcmV2aWV3JztcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0fVxuXG5cdG5nT25Jbml0KCk6IHZvaWQge1xuXHRcdEFuZHJvaWRDYW1lcmFQcmV2aWV3Q29tcG9uZW50LnJlcXVlc3RQZXJtaXNzaW9ucygpO1xuXHR9XG5cblx0cHVibGljIHRha2VQaG90bygpIHtcblx0XHRjYXB0dXJlSW1hZ2UoKTtcblx0fVxuXG5cdC8vIEluaXRcblx0cHJpdmF0ZSBvbkNyZWF0aW5nVmlldyhhcmdzKTogdm9pZCB7XG5cdFx0bVRleHR1cmVWaWV3ID0gbmV3IGFuZHJvaWQudmlldy5UZXh0dXJlVmlldyhhcHBsaWNhdGlvbi5hbmRyb2lkLmNvbnRleHQpO1xuXHRcdG1UZXh0dXJlVmlldy5zZXRTdXJmYWNlVGV4dHVyZUxpc3RlbmVyKG1TdXJmYWNlVGV4dHVyZUxpc3RlbmVyKTtcblx0XHRhcmdzLnZpZXcgPSBtVGV4dHVyZVZpZXc7XG5cdH1cblxuXHQvKiBTdGF0aWMgTWV0aG9kcyAqL1xuXHRwdWJsaWMgc3RhdGljIGlzQXZhaWxhYmxlKCkge1xuXHRcdHZhciB1dGlsczogdHlwZW9mIHV0aWxzTW9kdWxlID0gcmVxdWlyZShcInV0aWxzL3V0aWxzXCIpO1xuXG5cdFx0cmV0dXJuIHV0aWxzLmFkLmdldEFwcGxpY2F0aW9uQ29udGV4dCgpLmdldFBhY2thZ2VNYW5hZ2VyKCkuaGFzU3lzdGVtRmVhdHVyZShhbmRyb2lkLmNvbnRlbnQucG0uUGFja2FnZU1hbmFnZXIuRkVBVFVSRV9DQU1FUkEpXG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIHJlcXVlc3RQZXJtaXNzaW9ucygpIHtcblx0XHRsZXQgUkVRVUVTVF9SRVFVSVJFRF9QRVJNSVNTSU9OUyA9IDEyMzQ7XG5cdFx0aWYgKCFBbmRyb2lkQ2FtZXJhUHJldmlld0NvbXBvbmVudC5oYXNQZXJtaXNzaW9ucygpKSB7XG5cdFx0XHQoPGFueT5hbmRyb2lkLnN1cHBvcnQudjQuYXBwLkFjdGl2aXR5Q29tcGF0KS5yZXF1ZXN0UGVybWlzc2lvbnMoYXBwbGljYXRpb24uYW5kcm9pZC5jdXJyZW50Q29udGV4dCwgWyg8YW55PmFuZHJvaWQpLk1hbmlmZXN0LnBlcm1pc3Npb24uQ0FNRVJBLCAoPGFueT5hbmRyb2lkKS5NYW5pZmVzdC5wZXJtaXNzaW9uLldSSVRFX0VYVEVSTkFMX1NUT1JBR0VdLCBSRVFVRVNUX1JFUVVJUkVEX1BFUk1JU1NJT05TKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGhhc1Blcm1pc3Npb25zKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgcGVybWlzc2lvbnMgLi4uLlwiKTtcblx0XHRyZXR1cm4gKDxhbnk+YW5kcm9pZC5zdXBwb3J0LnY0LmNvbnRlbnQuQ29udGV4dENvbXBhdCkuY2hlY2tTZWxmUGVybWlzc2lvbihhcHBsaWNhdGlvbi5hbmRyb2lkLmN1cnJlbnRDb250ZXh0LCAoPGFueT5hbmRyb2lkKS5NYW5pZmVzdC5wZXJtaXNzaW9uLldSSVRFX0VYVEVSTkFMX1NUT1JBR0UpID09PSBhbmRyb2lkLmNvbnRlbnQucG0uUGFja2FnZU1hbmFnZXIuUEVSTUlTU0lPTl9HUkFOVEVEXG5cdFx0XHQmJiAoPGFueT5hbmRyb2lkLnN1cHBvcnQudjQuY29udGVudC5Db250ZXh0Q29tcGF0KS5jaGVja1NlbGZQZXJtaXNzaW9uKGFwcGxpY2F0aW9uLmFuZHJvaWQuY3VycmVudENvbnRleHQsICg8YW55PmFuZHJvaWQpLk1hbmlmZXN0LnBlcm1pc3Npb24uQ0FNRVJBKSA9PT0gYW5kcm9pZC5jb250ZW50LnBtLlBhY2thZ2VNYW5hZ2VyLlBFUk1JU1NJT05fR1JBTlRFRDtcblx0fVxufVxuXG5mdW5jdGlvbiBzdGFydFByZXZpZXcoKSB7XG5cblx0bGV0IHRleHR1cmUgPSBtVGV4dHVyZVZpZXcuZ2V0U3VyZmFjZVRleHR1cmUoKTtcblx0aWYgKHRleHR1cmUgPT0gbnVsbCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRleHR1cmUuc2V0RGVmYXVsdEJ1ZmZlclNpemUobVByZXZpZXdTaXplLmdldFdpZHRoKCksIG1QcmV2aWV3U2l6ZS5nZXRIZWlnaHQoKSk7XG5cdGxldCBzdXJmYWNlID0gbmV3IGFuZHJvaWQudmlldy5TdXJmYWNlKHRleHR1cmUpO1xuXG5cdHRyeSB7XG5cdFx0bVByZXZpZXdCdWlsZGVyID0gbUNhbWVyYURldmljZS5jcmVhdGVDYXB0dXJlUmVxdWVzdChhbmRyb2lkLmhhcmR3YXJlLmNhbWVyYTIuQ2FtZXJhRGV2aWNlLlRFTVBMQVRFX1BSRVZJRVcpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdH1cblxuXHRtUHJldmlld0J1aWxkZXIuYWRkVGFyZ2V0KHN1cmZhY2UpO1xuXHR0cnkge1xuXHRcdGlmIChtUHJldmlld1N0YXRlQ2FsbGJhY2sgPT0gbnVsbCkge1xuXHRcdFx0bVByZXZpZXdTdGF0ZUNhbGxiYWNrID0gbmV3IE15UHJldmlld1N0YXRlQ2FsbGJhY2soKTtcblx0XHR9XG5cdFx0bGV0IHN1cmZhY2VMaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3QoKTtcblx0XHRzdXJmYWNlTGlzdC5hZGQoc3VyZmFjZSk7XG5cblx0XHRtQ2FtZXJhRGV2aWNlLmNyZWF0ZUNhcHR1cmVTZXNzaW9uKHN1cmZhY2VMaXN0LCBtUHJldmlld1N0YXRlQ2FsbGJhY2ssIG51bGwpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdH1cbn1cblxuaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcblx0LyogTGlzdGVuZXJzICovXG5cdG1TdXJmYWNlVGV4dHVyZUxpc3RlbmVyID0gbmV3IGFuZHJvaWQudmlldy5UZXh0dXJlVmlldy5TdXJmYWNlVGV4dHVyZUxpc3RlbmVyKHtcblx0XHRvblN1cmZhY2VUZXh0dXJlQXZhaWxhYmxlKHN1cmZhY2UsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdTdXJmYWNlVGV4dHVyZUxpc3RlbmVyIG9uU3VyZmFjZVRleHR1cmVBdmFpbGFibGUnKTtcblx0XHRcdGxldCBhcHBDb250ZXh0ID0gYXBwbGljYXRpb24uYW5kcm9pZC5mb3JlZ3JvdW5kQWN0aXZpdHk7XG5cdFx0XHRsZXQgbWFuYWdlciA9IGFwcENvbnRleHQuZ2V0U3lzdGVtU2VydmljZShhbmRyb2lkLmNvbnRlbnQuQ29udGV4dC5DQU1FUkFfU0VSVklDRSk7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRsZXQgY2FtZXJhSWQgPSBtYW5hZ2VyLmdldENhbWVyYUlkTGlzdCgpWzBdOyAvLyBUT0RPOiBmaW5kIHRoZSBiYWNrIGZhY2luZyBjYW1lcmFcblx0XHRcdFx0bGV0IGNoYXJhY3RlcmlzdGljcyA9IG1hbmFnZXIuZ2V0Q2FtZXJhQ2hhcmFjdGVyaXN0aWNzKGNhbWVyYUlkKTtcblx0XHRcdFx0bGV0IG1hcCA9IGNoYXJhY3RlcmlzdGljcy5nZXQoYW5kcm9pZC5oYXJkd2FyZS5jYW1lcmEyLkNhbWVyYUNoYXJhY3RlcmlzdGljcy5TQ0FMRVJfU1RSRUFNX0NPTkZJR1VSQVRJT05fTUFQKTtcblx0XHRcdFx0bVByZXZpZXdTaXplID0gbWFwLmdldE91dHB1dFNpemVzKGFuZHJvaWQuZ3JhcGhpY3MuU3VyZmFjZVRleHR1cmUuY2xhc3MpWzBdO1xuXG5cdFx0XHRcdGlmIChtU3RhdGVDYWxsYmFjayA9PSBudWxsKSB7XG5cdFx0XHRcdFx0bVN0YXRlQ2FsbGJhY2sgPSBuZXcgTXlTdGF0ZUNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYW5hZ2VyLm9wZW5DYW1lcmEoY2FtZXJhSWQsIG1TdGF0ZUNhbGxiYWNrLCBudWxsKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvblN1cmZhY2VUZXh0dXJlVXBkYXRlZChzdXJmYWNlKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZygnU3VyZmFjZVRleHR1cmVMaXN0ZW5lciBvblN1cmZhY2VUZXh0dXJlVXBkYXRlZCcpO1xuXHRcdH0sXG5cdFx0b25TdXJmYWNlVGV4dHVyZVNpemVDaGFuZ2VkKHN1cmZhY2UsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdTdXJmYWNlVGV4dHVyZUxpc3RlbmVyIG9uU3VyZmFjZVRleHR1cmVTaXplQ2hhbmdlZCcpO1xuXHRcdH0sXG5cdFx0b25TdXJmYWNlVGV4dHVyZURlc3Ryb3llZChzdXJmYWNlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnU3VyZmFjZVRleHR1cmVMaXN0ZW5lciBvblN1cmZhY2VUZXh0dXJlRGVzdHJveWVkJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblxuXG5cdC8qIENhbGxiYWNrcyAqL1xuXHRNeVN0YXRlQ2FsbGJhY2sgPSBhbmRyb2lkLmhhcmR3YXJlLmNhbWVyYTIuQ2FtZXJhRGV2aWNlLlN0YXRlQ2FsbGJhY2suZXh0ZW5kKHtcblx0XHRvbk9wZW5lZChjYW1lcmEpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdDYW1lcmFEZXZpY2UuU3RhdGVDYWxsYmFjayBvbk9wZW5lZCcpO1xuXHRcdFx0bUNhbWVyYURldmljZSA9IGNhbWVyYTtcblx0XHRcdHN0YXJ0UHJldmlldygpO1xuXHRcdH0sXG5cdFx0b25FcnJvcihjYW1lcmEsIGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdDYW1lcmFEZXZpY2UuU3RhdGVDYWxsYmFja0Vycm9yOiAnICsgZXJyb3IpO1xuXHRcdH0sXG5cdFx0b25EaXNjb25uZWN0ZWQoY2FtZXJhKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnQ2FtZXJhRGV2aWNlLlN0YXRlQ2FsbGJhY2sgb25EaXNjb25uZWN0ZWQnKTtcblx0XHR9XG5cdH0pO1xuXG5cdE15UHJldmlld1N0YXRlQ2FsbGJhY2sgPSBhbmRyb2lkLmhhcmR3YXJlLmNhbWVyYTIuQ2FtZXJhQ2FwdHVyZVNlc3Npb24uU3RhdGVDYWxsYmFjay5leHRlbmQoe1xuXHRcdG9uQ29uZmlndXJlZChzZXNzaW9uKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnQ2FtZXJhQ2FwdHVyZVNlc3Npb24uU3RhdGVDYWxsYmFjayBvbkNvbmZpZ3VyZWQnKTtcblx0XHRcdG1QcmV2aWV3U2Vzc2lvbiA9IHNlc3Npb247XG5cblx0XHRcdG1QcmV2aWV3QnVpbGRlci5zZXQoYW5kcm9pZC5oYXJkd2FyZS5jYW1lcmEyLkNhcHR1cmVSZXF1ZXN0LkNPTlRST0xfTU9ERSxcblx0XHRcdFx0amF2YS5sYW5nLkludGVnZXIudmFsdWVPZihhbmRyb2lkLmhhcmR3YXJlLmNhbWVyYTIuQ2FtZXJhTWV0YWRhdGEuQ09OVFJPTF9NT0RFX0FVVE8pKTtcblxuXHRcdFx0bGV0IGJhY2tncm91bmRUaHJlYWQgPSBuZXcgYW5kcm9pZC5vcy5IYW5kbGVyVGhyZWFkKCdOTkdDYW1lcmFQcmV2aWV3Jyk7XG5cdFx0XHRiYWNrZ3JvdW5kVGhyZWFkLnN0YXJ0KCk7XG5cdFx0XHRsZXQgYmFja2dyb3VuZEhhbmRsZXIgPSBuZXcgYW5kcm9pZC5vcy5IYW5kbGVyKGJhY2tncm91bmRUaHJlYWQuZ2V0TG9vcGVyKCkpO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRtUHJldmlld1Nlc3Npb24uc2V0UmVwZWF0aW5nUmVxdWVzdChtUHJldmlld0J1aWxkZXIuYnVpbGQoKSwgbnVsbCwgYmFja2dyb3VuZEhhbmRsZXIpO1xuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uQ29uZmlndXJlRmFpbGVkKHNlc3Npb24pIHtcblx0XHRcdGNvbnNvbGUubG9nKCdDYW1lcmFDYXB0dXJlU2Vzc2lvbiBDb25maWd1cmUgZmFpbGVkJyk7XG5cdFx0fVxuXHR9KTtcblxuXG59XG5cblxuXHQvKiBJTUFHRSBDQVBUVVJFICovXG5cdGZ1bmN0aW9uIGNhcHR1cmVJbWFnZSgpIHtcblx0XHRpZiAobnVsbCA9PSBtQ2FtZXJhRGV2aWNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBhcHBDb250ZXh0ID0gYXBwbGljYXRpb24uYW5kcm9pZC5mb3JlZ3JvdW5kQWN0aXZpdHk7XG5cdFx0bGV0IG1hbmFnZXIgPSBhcHBDb250ZXh0LmdldFN5c3RlbVNlcnZpY2UoYW5kcm9pZC5jb250ZW50LkNvbnRleHQuQ0FNRVJBX1NFUlZJQ0UpO1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgY2hhcmFjdGVyaXN0aWNzID0gbWFuYWdlci5nZXRDYW1lcmFDaGFyYWN0ZXJpc3RpY3MobUNhbWVyYURldmljZS5nZXRJZCgpKTtcblxuXHRcdFx0bGV0IGpwZWdTaXplczogYW55ID0gbnVsbDtcblx0XHRcdGlmIChjaGFyYWN0ZXJpc3RpY3MgIT0gbnVsbCkge1xuXHRcdFx0XHRqcGVnU2l6ZXMgPSBjaGFyYWN0ZXJpc3RpY3Ncblx0XHRcdFx0XHQuZ2V0KGFuZHJvaWQuaGFyZHdhcmUuY2FtZXJhMi5DYW1lcmFDaGFyYWN0ZXJpc3RpY3MuU0NBTEVSX1NUUkVBTV9DT05GSUdVUkFUSU9OX01BUClcblx0XHRcdFx0XHQuZ2V0T3V0cHV0U2l6ZXMoYW5kcm9pZC5ncmFwaGljcy5JbWFnZUZvcm1hdC5KUEVHKTtcblx0XHRcdH1cblx0XHRcdGxldCB3aWR0aCA9IDY0MDsgLy8gZGVmYXVsdFxuXHRcdFx0bGV0IGhlaWdodCA9IDQ4MDsgLy8gZGVmYXVsdFxuXHRcdFx0aWYgKGpwZWdTaXplcyAhPSBudWxsICYmIGpwZWdTaXplcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHdpZHRoID0ganBlZ1NpemVzWzBdLmdldFdpZHRoKCk7XG5cdFx0XHRcdGhlaWdodCA9IGpwZWdTaXplc1swXS5nZXRIZWlnaHQoKTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IHJlYWRlciA9IGFuZHJvaWQubWVkaWEuSW1hZ2VSZWFkZXIubmV3SW5zdGFuY2Uod2lkdGgsIGhlaWdodCwgYW5kcm9pZC5ncmFwaGljcy5JbWFnZUZvcm1hdC5KUEVHLCAxKTtcblx0XHRcdGxldCBvdXRwdXRTdXJmYWNlcyA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0KCk7XG5cdFx0XHRvdXRwdXRTdXJmYWNlcy5hZGQocmVhZGVyLmdldFN1cmZhY2UoKSk7XG5cdFx0XHRvdXRwdXRTdXJmYWNlcy5hZGQobmV3IGFuZHJvaWQudmlldy5TdXJmYWNlKG1UZXh0dXJlVmlldy5nZXRTdXJmYWNlVGV4dHVyZSgpKSk7XG5cblx0XHRcdGxldCBjYXB0dXJlQnVpbGRlciA9IG1DYW1lcmFEZXZpY2UuY3JlYXRlQ2FwdHVyZVJlcXVlc3QoYW5kcm9pZC5oYXJkd2FyZS5jYW1lcmEyLkNhbWVyYURldmljZS5URU1QTEFURV9TVElMTF9DQVBUVVJFKTtcblx0XHRcdGNhcHR1cmVCdWlsZGVyLmFkZFRhcmdldChyZWFkZXIuZ2V0U3VyZmFjZSgpKTtcblx0XHRcdGNhcHR1cmVCdWlsZGVyLnNldChhbmRyb2lkLmhhcmR3YXJlLmNhbWVyYTIuQ2FwdHVyZVJlcXVlc3QuQ09OVFJPTF9NT0RFLFxuXHRcdFx0XHRqYXZhLmxhbmcuSW50ZWdlci52YWx1ZU9mKGFuZHJvaWQuaGFyZHdhcmUuY2FtZXJhMi5DYW1lcmFNZXRhZGF0YS5DT05UUk9MX01PREVfQVVUTykpO1xuXG5cdFx0XHQvLyBUT0RPOiByb3RhdGlvblxuXHRcdFx0bGV0IHJvdGF0aW9uID0gYXBwQ29udGV4dC5nZXRXaW5kb3dNYW5hZ2VyKCkuZ2V0RGVmYXVsdERpc3BsYXkoKS5nZXRSb3RhdGlvbigpO1xuXHRcdFx0Y29uc29sZS5sb2cocm90YXRpb24pO1xuXHRcdFx0Y2FwdHVyZUJ1aWxkZXIuc2V0KGFuZHJvaWQuaGFyZHdhcmUuY2FtZXJhMi5DYXB0dXJlUmVxdWVzdC5KUEVHX09SSUVOVEFUSU9OLCBqYXZhLmxhbmcuSW50ZWdlci52YWx1ZU9mKGdldFJvdGF0aW9uKHJvdGF0aW9uKSkpO1xuXG5cdFx0XHRsZXQgZmlsZSA9IG5ldyBqYXZhLmlvLkZpbGUoYW5kcm9pZC5vcy5FbnZpcm9ubWVudC5nZXRFeHRlcm5hbFN0b3JhZ2VEaXJlY3RvcnkoKSArIFwiL0RDSU1cIiwgXCJwaWNcIiArIChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5OTk5KSArIDEpICsgXCIuanBnXCIpO1xuXHRcdFx0Y29uc29sZS5sb2coJ2J1cnAnKTtcblx0XHRcdGxldCByZWFkZXJMaXN0ZW5lciA9IG5ldyBhbmRyb2lkLm1lZGlhLkltYWdlUmVhZGVyLk9uSW1hZ2VBdmFpbGFibGVMaXN0ZW5lcih7XG5cdFx0XHRcdHNhdmUoYnl0ZXMpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnU2F2aW5nIEJ5dGVzJyk7XG5cdFx0XHRcdFx0bGV0IG91dHB1dCA9IG51bGw7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBqYXZhLmlvLkZpbGVPdXRwdXRTdHJlYW0oZmlsZSk7XG5cdFx0XHRcdFx0XHRvdXRwdXQud3JpdGUoYnl0ZXMpO1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAob3V0cHV0ICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0b3V0cHV0LmNsb3NlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbkltYWdlQXZhaWxhYmxlKHJlYWRlcikge1xuXHRcdFx0XHRcdGxldCBpbWFnZSA9IG51bGw7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGltYWdlID0gcmVhZGVyLmFjcXVpcmVMYXRlc3RJbWFnZSgpO1xuXHRcdFx0XHRcdFx0bGV0IGJ1ZmZlciA9IGltYWdlLmdldFBsYW5lcygpWzBdLmdldEJ1ZmZlcigpO1xuXHRcdFx0XHRcdFx0bGV0IGJ5dGVzID0gQXJyYXkuY3JlYXRlKCdieXRlJywgYnVmZmVyLmNhcGFjaXR5KCkpO1xuXHRcdFx0XHRcdFx0YnVmZmVyLmdldChieXRlcyk7XG5cdFx0XHRcdFx0XHR0aGlzLnNhdmUoYnl0ZXMpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoaW1hZ2UgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRpbWFnZS5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGxldCB0aHJlYWQgPSBuZXcgYW5kcm9pZC5vcy5IYW5kbGVyVGhyZWFkKCdOTkdDYW1lcmFQcmV2aWV3Jyk7XG5cdFx0XHR0aHJlYWQuc3RhcnQoKTtcblx0XHRcdGxldCBiYWNrZ3JvdW5kSGFuZGxlciA9IG5ldyBhbmRyb2lkLm9zLkhhbmRsZXIodGhyZWFkLmdldExvb3BlcigpKTtcblx0XHRcdHJlYWRlci5zZXRPbkltYWdlQXZhaWxhYmxlTGlzdGVuZXIocmVhZGVyTGlzdGVuZXIsIGJhY2tncm91bmRIYW5kbGVyKTtcblxuXHRcdFx0bGV0IGNhcHR1cmVMaXN0ZW5lciA9IGFuZHJvaWQuaGFyZHdhcmUuY2FtZXJhMi5DYW1lcmFDYXB0dXJlU2Vzc2lvbi5DYXB0dXJlQ2FsbGJhY2suZXh0ZW5kKHtcblx0XHRcdFx0b25DYXB0dXJlQ29tcGxldGVkKHNlc3Npb24sIHJlcXVlc3QsIHJlc3VsdCkge1xuXHRcdFx0XHRcdHN0YXJ0UHJldmlldygpO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdDYXB0dXJlIENvbXBsZXRlJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRsZXQgY2FwdHVyZVN0YXRlQ2FsbGJhY2sgPSBhbmRyb2lkLmhhcmR3YXJlLmNhbWVyYTIuQ2FtZXJhQ2FwdHVyZVNlc3Npb24uU3RhdGVDYWxsYmFjay5leHRlbmQoe1xuXHRcdFx0XHRvbkNvbmZpZ3VyZWQoc2Vzc2lvbikge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRzZXNzaW9uLmNhcHR1cmUoY2FwdHVyZUJ1aWxkZXIuYnVpbGQoKSwgbmV3IGNhcHR1cmVMaXN0ZW5lcigpLCBiYWNrZ3JvdW5kSGFuZGxlcik7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbkNvbmZpZ3VyZUZhaWxlZChzZXNzaW9uKSB7XG5cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdidXJwJyk7XG5cdFx0XHRtQ2FtZXJhRGV2aWNlLmNyZWF0ZUNhcHR1cmVTZXNzaW9uKG91dHB1dFN1cmZhY2VzLCBuZXcgY2FwdHVyZVN0YXRlQ2FsbGJhY2soKSwgYmFja2dyb3VuZEhhbmRsZXIpO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFJvdGF0aW9uKHJvdGF0aW9uKSB7XG5cdFx0aWYgKHJvdGF0aW9uID09PSBhbmRyb2lkLnZpZXcuU3VyZmFjZS5ST1RBVElPTl8wKSB7XG5cdFx0XHRyZXR1cm4gOTA7XG5cdFx0fSBlbHNlIGlmIChyb3RhdGlvbiA9PT0gYW5kcm9pZC52aWV3LlN1cmZhY2UuUk9UQVRJT05fOTApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH0gZWxzZSBpZiAocm90YXRpb24gPT09IGFuZHJvaWQudmlldy5TdXJmYWNlLlJPVEFUSU9OXzE4MCkge1xuXHRcdFx0cmV0dXJuIDI3MDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIDE4MDtcblx0XHR9XG5cdH0iXX0=