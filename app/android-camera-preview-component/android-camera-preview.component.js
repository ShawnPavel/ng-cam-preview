"use strict";
var core_1 = require("@angular/core");
var application = require("application");
var STATE_PREVIEW = 0;
var STATE_WAITING_LOCK = 1;
var STATE_WAITING_PRECAPTURE = 2;
var STATE_WAITING_NON_PRECAPTURE = 3;
var STATE_PICTURE_TAKEN = 4;
var mState = STATE_PREVIEW;
var mTextureView;
var mPreviewSize = null;
var mCameraDevice = null;
var mPreviewBuilder = null;
var mPreviewSession = null;
var mStateCallback = null;
var mPreviewStateCallback = null;
var AndroidCameraPreviewComponent = AndroidCameraPreviewComponent_1 = (function () {
    function AndroidCameraPreviewComponent() {
    }
    AndroidCameraPreviewComponent.prototype.ngOnInit = function () {
        AndroidCameraPreviewComponent_1.requestPermissions();
    };
    AndroidCameraPreviewComponent.prototype.takePhoto = function () {
        captureImage();
    };
    // Init
    AndroidCameraPreviewComponent.prototype.onCreatingView = function (args) {
        mTextureView = new android.view.TextureView(application.android.context);
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        args.view = mTextureView;
    };
    /* Static Methods */
    AndroidCameraPreviewComponent.isAvailable = function () {
        var utils = require("utils/utils");
        return utils.ad.getApplicationContext().getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_CAMERA);
    };
    AndroidCameraPreviewComponent.requestPermissions = function () {
        var REQUEST_REQUIRED_PERMISSIONS = 1234;
        if (!AndroidCameraPreviewComponent_1.hasPermissions()) {
            android.support.v4.app.ActivityCompat.requestPermissions(application.android.currentContext, [android.Manifest.permission.CAMERA, android.Manifest.permission.WRITE_EXTERNAL_STORAGE], REQUEST_REQUIRED_PERMISSIONS);
        }
    };
    AndroidCameraPreviewComponent.hasPermissions = function () {
        console.log("checking permissions ....");
        return android.support.v4.content.ContextCompat.checkSelfPermission(application.android.currentContext, android.Manifest.permission.WRITE_EXTERNAL_STORAGE) === android.content.pm.PackageManager.PERMISSION_GRANTED
            && android.support.v4.content.ContextCompat.checkSelfPermission(application.android.currentContext, android.Manifest.permission.CAMERA) === android.content.pm.PackageManager.PERMISSION_GRANTED;
    };
    AndroidCameraPreviewComponent.hasDeniedPermissions = function () {
        console.log("checking permissions ....");
        return android.support.v4.content.ContextCompat.checkSelfPermission(application.android.currentContext, android.Manifest.permission.WRITE_EXTERNAL_STORAGE) === android.content.pm.PackageManager.PERMISSION_DENIED
            && android.support.v4.content.ContextCompat.checkSelfPermission(application.android.currentContext, android.Manifest.permission.CAMERA) === android.content.pm.PackageManager.PERMISSION_DENIED;
    };
    return AndroidCameraPreviewComponent;
}());
AndroidCameraPreviewComponent.TAG = 'NNGCameraPreview';
AndroidCameraPreviewComponent = AndroidCameraPreviewComponent_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'android-camera-preview',
        templateUrl: 'android-camera-preview.component.html',
        styleUrls: ['android-camera-preview.css']
    }),
    __metadata("design:paramtypes", [])
], AndroidCameraPreviewComponent);
exports.AndroidCameraPreviewComponent = AndroidCameraPreviewComponent;
function startPreview() {
    var texture = mTextureView.getSurfaceTexture();
    if (texture == null) {
        return;
    }
    texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
    var surface = new android.view.Surface(texture);
    try {
        mPreviewBuilder = mCameraDevice.createCaptureRequest(android.hardware.camera2.CameraDevice.TEMPLATE_PREVIEW);
    }
    catch (err) {
        console.error(err);
    }
    mPreviewBuilder.addTarget(surface);
    try {
        if (mPreviewStateCallback == null) {
            mPreviewStateCallback = new MyPreviewStateCallback();
        }
        var surfaceList = new java.util.ArrayList();
        surfaceList.add(surface);
        mCameraDevice.createCaptureSession(surfaceList, mPreviewStateCallback, null);
    }
    catch (err) {
        console.error(err);
    }
}
/* Listeners */
var mSurfaceTextureListener = new android.view.TextureView.SurfaceTextureListener({
    onSurfaceTextureAvailable: function (surface, width, height) {
        console.log('SurfaceTextureListener onSurfaceTextureAvailable');
        var appContext = application.android.foregroundActivity;
        var manager = appContext.getSystemService(android.content.Context.CAMERA_SERVICE);
        try {
            var cameraId = manager.getCameraIdList()[0]; // TODO: find the back facing camera
            var characteristics = manager.getCameraCharacteristics(cameraId);
            var map = characteristics.get(android.hardware.camera2.CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            mPreviewSize = map.getOutputSizes(android.graphics.SurfaceTexture.class)[0];
            if (mStateCallback == null) {
                mStateCallback = new MyStateCallback();
            }
            manager.openCamera(cameraId, mStateCallback, null);
        }
        catch (err) {
            console.error(err);
        }
    },
    onSurfaceTextureUpdated: function (surface) {
        // console.log('SurfaceTextureListener onSurfaceTextureUpdated');
    },
    onSurfaceTextureSizeChanged: function (surface, width, height) {
        console.log('SurfaceTextureListener onSurfaceTextureSizeChanged');
    },
    onSurfaceTextureDestroyed: function (surface) {
        console.log('SurfaceTextureListener onSurfaceTextureDestroyed');
        return false;
    }
});
/* Callbacks */
var MyStateCallback = android.hardware.camera2.CameraDevice.StateCallback.extend({
    onOpened: function (camera) {
        console.log('CameraDevice.StateCallback onOpened');
        mCameraDevice = camera;
        startPreview();
    },
    onError: function (camera, error) {
        console.error('CameraDevice.StateCallbackError: ' + error);
    },
    onDisconnected: function (camera) {
        console.log('CameraDevice.StateCallback onDisconnected');
    }
});
var MyPreviewStateCallback = android.hardware.camera2.CameraCaptureSession.StateCallback.extend({
    onConfigured: function (session) {
        console.log('CameraCaptureSession.StateCallback onConfigured');
        var appContext = application.android.foregroundActivity;
        mPreviewSession = session;
        mPreviewBuilder.set(android.hardware.camera2.CaptureRequest.CONTROL_MODE, java.lang.Integer.valueOf(android.hardware.camera2.CameraMetadata.CONTROL_MODE_AUTO));
        var backgroundThread = new android.os.HandlerThread('NNGCameraPreview');
        backgroundThread.start();
        var backgroundHandler = new android.os.Handler(backgroundThread.getLooper());
        try {
            mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), null, backgroundHandler);
        }
        catch (err) {
            console.error(err);
        }
    },
    onConfigureFailed: function (session) {
        console.log('CameraCaptureSession Configure failed');
    }
});
/* IMAGE CAPTURE */
function captureImage() {
    if (null == mCameraDevice) {
        return;
    }
    var appContext = application.android.foregroundActivity;
    var manager = appContext.getSystemService(android.content.Context.CAMERA_SERVICE);
    try {
        var characteristics = manager.getCameraCharacteristics(mCameraDevice.getId());
        var jpegSizes = null;
        if (characteristics != null) {
            jpegSizes = characteristics
                .get(android.hardware.camera2.CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
                .getOutputSizes(android.graphics.ImageFormat.JPEG);
        }
        var width = 640; // default
        var height = 480; // default
        if (jpegSizes != null && jpegSizes.length > 0) {
            width = jpegSizes[0].getWidth();
            height = jpegSizes[0].getHeight();
        }
        var reader = android.media.ImageReader.newInstance(width, height, android.graphics.ImageFormat.JPEG, 1);
        var outputSurfaces = new java.util.ArrayList();
        outputSurfaces.add(reader.getSurface());
        outputSurfaces.add(new android.view.Surface(mTextureView.getSurfaceTexture()));
        var captureBuilder_1 = mCameraDevice.createCaptureRequest(android.hardware.camera2.CameraDevice.TEMPLATE_STILL_CAPTURE);
        captureBuilder_1.addTarget(reader.getSurface());
        captureBuilder_1.set(android.hardware.camera2.CaptureRequest.CONTROL_MODE, java.lang.Integer.valueOf(android.hardware.camera2.CameraMetadata.CONTROL_MODE_AUTO));
        // TODO: rotation
        var rotation = appContext.getWindowManager().getDefaultDisplay().getRotation();
        captureBuilder_1.set(android.hardware.camera2.CaptureRequest.JPEG_ORIENTATION, java.lang.Integer.valueOf(getRotation(rotation)));
        var file_1 = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DCIM", "pic.jpg");
        var readerListener = new android.media.ImageReader.OnImageAvailableListener({
            save: function (bytes) {
                console.log('Saving Bytes');
                var output = null;
                try {
                    output = new java.io.FileOutputStream(file_1);
                    output.write(bytes);
                }
                finally {
                    if (output != null) {
                        output.close();
                    }
                }
            },
            onImageAvailable: function (reader) {
                var image = null;
                try {
                    image = reader.acquireLatestImage();
                    var buffer = image.getPlanes()[0].getBuffer();
                    // const bytes = new java.lang.Byte[buffer.capacity()];
                    var bytes = Array.create('byte', buffer.capacity());
                    buffer.get(bytes);
                    this.save(bytes);
                }
                catch (err) {
                    console.error(err);
                }
                finally {
                    if (image != null) {
                        image.close();
                    }
                }
            }
        });
        var thread = new android.os.HandlerThread('NNGCameraPreview');
        thread.start();
        var backgroundHandler_1 = new android.os.Handler(thread.getLooper());
        reader.setOnImageAvailableListener(readerListener, backgroundHandler_1);
        var captureListener_1 = android.hardware.camera2.CameraCaptureSession.CaptureCallback.extend({
            onCaptureCompleted: function (session, request, result) {
                startPreview();
                console.log('Capture Complete');
            }
        });
        var captureStateCallback = android.hardware.camera2.CameraCaptureSession.StateCallback.extend({
            onConfigured: function (session) {
                try {
                    session.capture(captureBuilder_1.build(), new captureListener_1(), backgroundHandler_1);
                }
                catch (err) {
                    console.error(err);
                }
            },
            onConfigureFailed: function (session) {
            }
        });
        mCameraDevice.createCaptureSession(outputSurfaces, new captureStateCallback(), backgroundHandler_1);
    }
    catch (err) {
        console.error(err);
    }
}
function getRotation(rotation) {
    if (rotation === android.view.Surface.ROTATION_0) {
        return 90;
    }
    else if (rotation === android.view.Surface.ROTATION_90) {
        return 0;
    }
    else if (rotation === android.view.Surface.ROTATION_180) {
        return 270;
    }
    else {
        return 180;
    }
}
var AndroidCameraPreviewComponent_1;
//# sourceMappingURL=data:application/json;base64,